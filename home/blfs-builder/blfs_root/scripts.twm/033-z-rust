#!/bin/bash
set -e
unset MAKELEVEL

export JH_PKG_DIR=rust
SRC_DIR=${JH_SRC_ARCHIVE}${JH_SRC_SUBDIRS:+/${JH_PKG_DIR}}
BUILD_DIR=${JH_BUILD_ROOT}${JH_BUILD_SUBDIRS:+/${JH_PKG_DIR}}
mkdir -p $SRC_DIR
mkdir -p $BUILD_DIR

cd $SRC_DIR
PACKAGE=rustc-1.52.0-src.tar.gz
if [[ ! -f $PACKAGE ]] ; then
  if [[ -f $JH_SRC_ARCHIVE/$PACKAGE ]] ; then
    cp $JH_SRC_ARCHIVE/$PACKAGE $PACKAGE
  else
    wget -T 30 -t 5 https://static.rust-lang.org/dist/rustc-1.52.0-src.tar.gz ||
    wget -T 30 -t 5 ${JH_FTP_SERVER}svn/r/$PACKAGE
  fi
fi
echo "bd6fbe9ba5fe457d2514e92a6ccd7b24  $PACKAGE" | md5sum -c -

cd $BUILD_DIR
find . -maxdepth 1 -mindepth 1 -type d | xargs sudo rm -rf

case $PACKAGE in
  *.tar.gz|*.tar.bz2|*.tar.xz|*.tgz|*.tar.lzma)
     tar -xvf $SRC_DIR/$PACKAGE > unpacked
     JH_UNPACKDIR=`grep '[^./]\+' unpacked | head -n1 | sed 's@^\./@@;s@/.*@@'`
     ;;
  *.tar.lz)
     bsdtar -xvf $SRC_DIR/$PACKAGE 2> unpacked
     JH_UNPACKDIR=`head -n1 unpacked | cut  -d" " -f2 | sed 's@^\./@@;s@/.*@@'`
     ;;
  *.zip)
     zipinfo -1 $SRC_DIR/$PACKAGE > unpacked
     JH_UNPACKDIR="$(sed 's@/.*@@' unpacked | uniq )"
     if test $(wc -w <<< $JH_UNPACKDIR) -eq 1; then
       unzip $SRC_DIR/$PACKAGE
     else
       JH_UNPACKDIR=${PACKAGE%.zip}
       unzip -d $JH_UNPACKDIR $SRC_DIR/$PACKAGE
     fi
     ;;
  *)
     JH_UNPACKDIR=$JH_PKG_DIR-build
     mkdir $JH_UNPACKDIR
     cp $SRC_DIR/$PACKAGE $JH_UNPACKDIR
     ADDITIONAL="$(find . -mindepth 1 -maxdepth 1 -type l)"
     if [ -n "$ADDITIONAL" ]; then
         cp $ADDITIONAL $JH_UNPACKDIR
     fi
     ;;
esac
export JH_UNPACKDIR
cd $JH_UNPACKDIR

sudo -E sh << ROOT_EOF
mkdir /opt/rustc-1.52.0
ln -svfin rustc-1.52.0 /opt/rustc
ROOT_EOF
cat << EOF > config.toml
# see config.toml.example for more possible options
# See the 8.4 book for an example using shipped LLVM
# e.g. if not installing clang, or using a version before 10.0
[llvm]
# by default, rust will build for a myriad of architectures
targets = "X86"

# When using system llvm prefer shared libraries
link-shared = true

[build]
# omit docs to save time and space (default is to build them)
docs = false

# install cargo as well as rust
extended = true

[install]
prefix = "/opt/rustc-1.52.0"
docdir = "share/doc/rustc-1.52.0"

[rust]
channel = "stable"
rpath = false

# BLFS does not install the FileCheck executable from llvm,
# so disable codegen tests
codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"


EOF
export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"
python3 ./x.py build --exclude src/tools/miri
#python3 ./x.py test --verbose || true
#      --no-fail-fast | tee rustc-testlog || true
#grep '^test result:' rustc-testlog | awk  '{ sum += $6 } END { print sum }' || true
export LIBSSH2_SYS_USE_PKG_CONFIG=1
DESTDIR=${PWD}/install python3 ./x.py install
unset LIBSSH2_SYS_USE_PKG_CONFIG
sudo -E sh << ROOT_EOF
chown -R root:root install
cp -a install/* /

for libdir in /lib /usr/lib \$(find /opt -name lib); do
  find \$libdir -name \\*.la           \\
             ! -path \\*ImageMagick\\* \\
               -delete
done
ROOT_EOF
sudo /sbin/ldconfig

sudo -E sh << ROOT_EOF
cat >> /etc/ld.so.conf << EOF
# Begin rustc addition

/opt/rustc/lib

# End rustc addition
EOF

ldconfig
cat > /etc/profile.d/rustc.sh << "EOF"
# Begin /etc/profile.d/rustc.sh

pathprepend /opt/rustc/bin           PATH

# End /etc/profile.d/rustc.sh
EOF
ROOT_EOF
source /etc/profile.d/rustc.sh

cd $BUILD_DIR
[[ -n "$JH_KEEP_FILES" ]] || sudo rm -rf $JH_UNPACKDIR unpacked

exit
